package com.belatrix.habilidadessociolaborales.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOG.
*/
public class LogDao extends AbstractDao<Log, Long> {

    public static final String TABLENAME = "LOG";

    /**
     * Properties of entity Log.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property ScenarioId = new Property(2, Long.class, "scenarioId", false, "SCENARIO_ID");
        public final static Property ScenarioName = new Property(3, String.class, "scenarioName", false, "SCENARIO_NAME");
        public final static Property QuestionId = new Property(4, Long.class, "questionId", false, "QUESTION_ID");
        public final static Property Question = new Property(5, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(6, String.class, "answer", false, "ANSWER");
        public final static Property Answered = new Property(7, String.class, "answered", false, "ANSWERED");
        public final static Property IsCorrect = new Property(8, Boolean.class, "isCorrect", false, "IS_CORRECT");
        public final static Property User = new Property(9, Long.class, "user", false, "USER");
        public final static Property SessionId = new Property(10, Long.class, "sessionId", false, "SESSION_ID");
        public final static Property UserId = new Property(11, Long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<Log> user_SessionsQuery;
    private Query<Log> session_LogsQuery;

    public LogDao(DaoConfig config) {
        super(config);
    }
    
    public LogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'SCENARIO_ID' INTEGER," + // 2: scenarioId
                "'SCENARIO_NAME' TEXT," + // 3: scenarioName
                "'QUESTION_ID' INTEGER," + // 4: questionId
                "'QUESTION' TEXT," + // 5: question
                "'ANSWER' TEXT," + // 6: answer
                "'ANSWERED' TEXT," + // 7: answered
                "'IS_CORRECT' INTEGER," + // 8: isCorrect
                "'USER' INTEGER," + // 9: user
                "'SESSION_ID' INTEGER," + // 10: sessionId
                "'USER_ID' INTEGER);"); // 11: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Long scenarioId = entity.getScenarioId();
        if (scenarioId != null) {
            stmt.bindLong(3, scenarioId);
        }
 
        String scenarioName = entity.getScenarioName();
        if (scenarioName != null) {
            stmt.bindString(4, scenarioName);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(5, questionId);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(6, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String answered = entity.getAnswered();
        if (answered != null) {
            stmt.bindString(8, answered);
        }
 
        Boolean isCorrect = entity.getIsCorrect();
        if (isCorrect != null) {
            stmt.bindLong(9, isCorrect ? 1l: 0l);
        }
 
        Long user = entity.getUser();
        if (user != null) {
            stmt.bindLong(10, user);
        }
 
        Long sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindLong(11, sessionId);
        }
    }

    @Override
    protected void attachEntity(Log entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Log readEntity(Cursor cursor, int offset) {
        Log entity = new Log( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // scenarioId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scenarioName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // questionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // question
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // answered
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isCorrect
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // user
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // sessionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Log entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setScenarioId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setScenarioName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestionId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setQuestion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswered(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCorrect(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setUser(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setSessionId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Log entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Log entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sessions" to-many relationship of User. */
    public List<Log> _queryUser_Sessions(Long userId) {
        synchronized (this) {
            if (user_SessionsQuery == null) {
                QueryBuilder<Log> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_SessionsQuery = queryBuilder.build();
            }
        }
        Query<Log> query = user_SessionsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "logs" to-many relationship of Session. */
    public List<Log> _querySession_Logs(Long sessionId) {
        synchronized (this) {
            if (session_LogsQuery == null) {
                QueryBuilder<Log> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SessionId.eq(null));
                session_LogsQuery = queryBuilder.build();
            }
        }
        Query<Log> query = session_LogsQuery.forCurrentThread();
        query.setParameter(0, sessionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSessionDao().getAllColumns());
            builder.append(" FROM LOG T");
            builder.append(" LEFT JOIN SESSION T0 ON T.'SESSION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Log loadCurrentDeep(Cursor cursor, boolean lock) {
        Log entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Session session = loadCurrentOther(daoSession.getSessionDao(), cursor, offset);
        entity.setSession(session);

        return entity;    
    }

    public Log loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Log> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Log> list = new ArrayList<Log>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Log> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Log> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
