package com.belatrix.habilidadessociolaborales.datamodel;

import android.content.Context;
import android.graphics.Bitmap;

import com.belatrix.habilidadessociolaborales.utils.ImageUtils;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SCENARIO.
 */
public class Scenario {

    private Long id;
    private String name;
    private String dependencies;
    private String imageUrl;
    private byte[] image;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ScenarioDao myDao;

    private List<Question> questions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Scenario() {
    }

    public Scenario(Long id) {
        this.id = id;
    }

    public Scenario(Long id, String name, String dependencies, String imageUrl, byte[] image) {
        this.id = id;
        this.name = name;
        this.dependencies = dependencies;
        this.imageUrl = imageUrl;
        this.image = image;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScenarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDependencies() {
        return dependencies;
    }

    public void setDependencies(String dependencies) {
        this.dependencies = dependencies;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Question> getQuestions() {
        if (questions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            List<Question> questionsNew = targetDao._queryScenario_Questions(id);
            synchronized (this) {
                if(questions == null) {
                    questions = questionsNew;
                }
            }
        }
        return questions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestions() {
        questions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Bitmap getBitmapImage(Context context) {
        if (getImage() != null) {
            return ImageUtils.getInstance(context).byteArrayToBitmap(getImage());
        } else {
            return null;
        }

    }

    @Override
    public String toString() {
        return getName();
    }
    // KEEP METHODS END

}
